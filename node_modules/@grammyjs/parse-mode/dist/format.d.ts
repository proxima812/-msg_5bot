import type { MessageEntity } from "./deps.node.js";
/**
 * Objects that implement this interface implement a `.toString()`
 * method that returns a `string` value representing the object.
 */
export interface Stringable {
    /**
     * Returns the string representation of this object
     */
    toString(): string;
}
/**
 * Represents the formatted string after the parsing.
 */
declare class FormattedString implements Stringable {
    /**
     * Plain text value for this `FormattedString`
     */
    text: string;
    /**
     * Format entities for this `FormattedString`
     */
    entities: MessageEntity[];
    /**
     * Creates a new `FormattedString`. Useful for constructing a
     * `FormattedString` from user's formatted message
     *
     * ```ts
     * // Constructing a new `FormattedString` from user's message
     * const userMsg = new FormattedString(ctx.message.text, ctx.entities());
     * ```
     *
     * @param text Plain text value
     * @param entities Format entities
     */
    constructor(text: string, entities: MessageEntity[]);
    /**
     * Returns the string representation of this object
     */
    toString(): string;
}
/**
 * Formats the `Stringable` as bold. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 */
declare const bold: (stringLike: Stringable) => FormattedString;
/**
 * Formats the `Stringable` as inline code. Cannot be combined with any other formats.
 * @param stringLike The `Stringable` to format.
 */
declare const code: (stringLike: Stringable) => FormattedString;
/**
 * Formats the `Stringable` as italic. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 */
declare const italic: (stringLike: Stringable) => FormattedString;
/**
 * Formats the `Stringable` as a link. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 * @param url The URL to link to.
 */
declare const link: (stringLike: Stringable, url: string) => FormattedString;
/**
 * Formats the `Stringable` as a code block. Cannot be combined with any other formats.
 * @param stringLike The `Stringable` to format.
 * @param language The language of the code block.
 */
declare const pre: (stringLike: Stringable, language: string) => FormattedString;
/**
 * Formats the `Stringable` as a spoiler. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 */
declare const spoiler: (stringLike: Stringable) => FormattedString;
/**
 * Formats the `Stringable` as a blockquote. Cannot be nested.
 * @param stringLike The `Stringable` to format.
 */
declare const blockquote: (stringLike: Stringable) => FormattedString;
/**
 * Formats the `Stringable` as a strikethrough. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 */
declare const strikethrough: (stringLike: Stringable) => FormattedString;
/**
 * Formats the `Stringable` as a underline. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 */
declare const underline: (stringLike: Stringable) => FormattedString;
/**
 * Formats the `Stringable` as an internal Telegram link to a user. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 * @param userId The user ID to link to.
 */
declare const mentionUser: (stringLike: Stringable, userId: number) => FormattedString;
/**
 * Inserts a custom emoji.
 * @param placeholder A placeholder emoji
 * @param emoji The custom emoji identifier
 */
declare const customEmoji: (placeholder: Stringable, emoji: number) => FormattedString;
/**
 * Formats the `Stringable`` as a Telegram link to a chat message. Incompatible with `code` and `pre`.
 * @param stringLike The `Stringable` to format.
 * @param chatId The chat ID to link to.
 * @param messageId The message ID to link to.
 */
declare const linkMessage: (stringLike: Stringable, chatId: number, messageId: number) => Stringable;
/**
 * This is the format tagged template function. It accepts a template literal
 * containing any mix of `Stringable` and `string` values, and constructs a
 * `FormattedString` that represents the combination of all the given values.
 * The constructed `FormattedString` also implements Stringable, and can be used
 * in further `fmt` tagged templates.
 *
 * Can also be called like regular function and passed an array of `Stringable`s.
 *
 * ```ts
 * // Using return values of fmt in fmt
 * const left = fmt`${bold('>>>')} >>>`;
 * const right = fmt`<<< ${bold('<<<')}`;
 *
 * const final = fmt`${left} ${ctx.msg.text} ${right}`;
 * await ctx.replyFmt(final);
 *
 * // Using regular function form
 * const cart = fmt([
 *   "Your shopping cart:\n",
 *   ...items.map((item) => fmt`- ${bold(item.name)} (${item.price})\n`),
 * ]);
 * // Using result in editMessageText
 * await ctx.editMessageText(cart.text, { entities: cart.entities });
 * ```
 *
 * @param rawStringParts An array of `string` parts found in the tagged template (can also be `Stringable`s)
 * @param stringLikes An array of `Stringable`s found in the tagged template
 */
declare const fmt: (rawStringParts: TemplateStringsArray | Stringable[], ...stringLikes: Stringable[]) => FormattedString;
export { blockquote, bold, code, customEmoji, fmt, FormattedString, italic, link, linkMessage, mentionUser, pre, spoiler, strikethrough, underline, };
