"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hydrateReply = void 0;
const format_js_1 = require("./format.js");
const buildReplyWithParseMode = (parseMode, ctx) => {
    return (...args) => {
        const [text, payload, ...rest] = args;
        return ctx.reply(text, { ...payload, parse_mode: parseMode }, ...rest);
    };
};
/**
 * Hydrates a context with an additional set of reply methods
 * @param ctx The context to hydrate
 * @param next The next middleware function
 */
const hydrateReply = async (ctx, next) => {
    ctx.replyFmt = (stringLike, ...args) => {
        const [payload, ...rest] = args;
        const entities = stringLike instanceof format_js_1.FormattedString
            ? { entities: stringLike.entities }
            : undefined;
        return ctx.reply(stringLike.toString(), { ...payload, ...entities }, ...rest);
    };
    ctx.replyWithHTML = buildReplyWithParseMode("HTML", ctx);
    ctx.replyWithMarkdown = buildReplyWithParseMode("MarkdownV2", ctx);
    ctx.replyWithMarkdownV1 = buildReplyWithParseMode("Markdown", ctx);
    ctx.replyWithMarkdownV2 = buildReplyWithParseMode("MarkdownV2", ctx);
    ctx.replyFmtWithPhoto = (photo, other, ...args) => {
        const caption = other?.caption?.toString();
        const caption_entities = other?.caption instanceof format_js_1.FormattedString
            ? other.caption.entities
            : other?.caption_entities;
        return ctx.replyWithPhoto(photo, {
            ...other,
            caption,
            caption_entities,
        }, ...args);
    };
    ctx.replyFmtWithMediaGroup = (media, other, ...args) => {
        const inputMedia = media.map((item) => {
            const caption = item.caption?.toString();
            const caption_entities = item.caption instanceof format_js_1.FormattedString
                ? item.caption.entities
                : item.caption_entities;
            return {
                ...item,
                caption,
                caption_entities,
            };
        });
        return ctx.replyWithMediaGroup(inputMedia, other, ...args);
    };
    ctx.editFmtMessageMedia = (media, other, ...args) => {
        const caption = media.caption?.toString();
        const caption_entities = media.caption instanceof format_js_1.FormattedString
            ? media.caption.entities
            : media?.caption_entities;
        return ctx.editMessageMedia({
            ...media,
            caption,
            caption_entities,
        }, other, ...args);
    };
    ctx.editFmtMessageText = (text, other, ...args) => {
        const entities = text instanceof format_js_1.FormattedString
            ? text.entities
            : other?.entities;
        return ctx.editMessageText(text.toString(), {
            ...other,
            entities,
        }, ...args);
    };
    await next();
};
exports.hydrateReply = hydrateReply;
