import type { Context, NextFunction } from "./deps.node.js";
import { type Stringable } from "./format.js";
type Tail<T extends Array<unknown>> = T extends [
    head: infer E1,
    ...tail: infer E2
] ? E2 : [];
/**
 * Context flavor for `Context` that will be hydrated with
 * an additional set of reply methods from `hydrateReply`
 */
type ParseModeFlavor<C extends Context> = C & {
    replyFmt: (stringLike: Stringable, ...args: Tail<Parameters<C["reply"]>>) => ReturnType<C["reply"]>;
    replyWithHTML: C["reply"];
    replyWithMarkdown: C["reply"];
    replyWithMarkdownV1: C["reply"];
    replyWithMarkdownV2: C["reply"];
    replyFmtWithPhoto: (photo: Parameters<C["replyWithPhoto"]>[0], other?: Omit<Exclude<Parameters<C["replyWithPhoto"]>[1], undefined>, "caption"> & {
        caption?: Stringable;
    }, ...args: Tail<Tail<Parameters<C["replyWithPhoto"]>>>) => ReturnType<C["replyWithPhoto"]>;
    replyFmtWithMediaGroup: (media: (Omit<Parameters<C["replyWithMediaGroup"]>[0][number], "caption"> & {
        caption?: Stringable;
    })[], other?: Parameters<C["replyWithMediaGroup"]>[1], ...args: Tail<Tail<Parameters<C["replyWithMediaGroup"]>>>) => ReturnType<C["replyWithMediaGroup"]>;
    editFmtMessageMedia: (media: Omit<Parameters<C["editMessageMedia"]>[0], "caption"> & {
        caption?: Stringable;
    }, other?: Omit<Parameters<C["editMessageMedia"]>[1], "caption">, ...args: Tail<Tail<Parameters<C["editMessageMedia"]>>>) => ReturnType<C["editMessageMedia"]>;
    editFmtMessageText: (text: Stringable, other?: Parameters<C["editMessageText"]>[1], ...args: Tail<Tail<Parameters<C["editMessageText"]>>>) => ReturnType<C["editMessageText"]>;
};
/**
 * @deprecated Use ParseModeFlavor instead of ParseModeContext
 */
type ParseModeContext<C extends Context = Context> = ParseModeFlavor<C>;
/**
 * Hydrates a context with an additional set of reply methods
 * @param ctx The context to hydrate
 * @param next The next middleware function
 */
declare const hydrateReply: <C extends Context>(ctx: ParseModeFlavor<C>, next: NextFunction) => Promise<void>;
export { hydrateReply, type ParseModeContext, type ParseModeFlavor };
