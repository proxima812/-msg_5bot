"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
const parse_mode_1 = require("@grammyjs/parse-mode")
const supabase_js_1 = require("@supabase/supabase-js")
const grammy_1 = require("grammy")
const supabase = (0, supabase_js_1.createClient)(
	"https://fkwivycaacgpuwfvozlp.supabase.co",
	"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZrd2l2eWNhYWNncHV3ZnZvemxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM5MDc4MTEsImV4cCI6MjA0OTQ4MzgxMX0.44dYay0RWos4tqwuj6H-ylqN4TrAIabeQLNzBn6Xuy0",
)
const token = "7930164051:AAHF4GdP_jpjOiBl6ZCA1gY8HJZ-VH3A520"
if (!token) throw new Error("TOKEN is unset")
const bot = new grammy_1.Bot(token)
const CHANNEL_ID = "-1002387924511"
// –ü–∏—à–µ—à—å id—à–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤, –∫—É–¥–∞ –ø–æ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–ø–∏—Å–∏.
// const CHANNEL_IDS = ["channel_id_1", "channel_id_2", "channel_id_3"]
// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
bot.use((0, grammy_1.session)({ initial: () => ({ groupData: {} }) })) // –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(parse_mode_1.hydrateReply) // –¥–ª—è –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
bot.api.config.use((0, parse_mode_1.parseMode)("Markdown")) // –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
bot.command("start", async ctx => {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞
	ctx.session.step = undefined
	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: new grammy_1.InlineKeyboard()
			.text("üî• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üî•", "add_group")
			.row()
			.url("üë• –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://t.me/trust_unity")
			.row()
			.url("üåê –°–∞–π—Ç, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://ppros.vercel.app/")
			.row()
			.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
			.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time")
			.row()
			.text("üî∏ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ üî∏", "show_text")
			.row()
			.text("‚ô® –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É", "search_format"),
	})
})
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_group
bot.on("callback_query", async ctx => {
	const data = ctx.callbackQuery.data
	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
	if (data === "show_text") {
		await ctx.answerCallbackQuery()
		await ctx.reply(
			"–ë–æ—Ç –ø–æ—Å—Ç–∏—Ç –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ (-100238792451), —á—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º?\n\n- –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É.\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É –º–µ–Ω—è, –∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ —Å–µ–±–µ –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @legion_free \n\n–ò—Å–∫–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ https://github.com/proxima812/-msg_5bot",
			{ parse_mode: "HTML" },
		)
	}
	// –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
	if (data === "add_group") {
		await ctx.answerCallbackQuery()
		await ctx.reply("üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
		ctx.session.step = "name" // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
	}
	// –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
	if (data === "search_community") {
		await ctx.answerCallbackQuery()
		ctx.session.step = "search_community" // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
		await ctx.reply("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
	}
	// –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	if (data === "search_time") {
		await ctx.answerCallbackQuery()
		ctx.session.step = "search_time" // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
		await ctx.reply("üîç –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ñ–æ—Ä–º–∞—Ç 00:00):")
	}
	// –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
	if (data === "search_format") {
		await ctx.answerCallbackQuery()
		ctx.session.step = "search_format" // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã groups format
		const { data: formats, error } = await supabase
			.from("groups") // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
			.select("format") // –ü–æ–ª–µ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏

		if (error) {
			console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤:", error)
			await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		} else {
			// –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
			const uniqueFormats = [...new Set(formats.map(f => f.format))]
			const formatsList = uniqueFormats.join(", ")
			await ctx.reply(
				`üëâ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n${formatsList}\n\n‚ô® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:`,
			)
		}
	}
})
// –ò–∑ –ë–î –≤—ã–ª–æ–∂–∏—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ –∫–∞–Ω–∞–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –ë–î
bot.command("show_groups", async ctx => {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if (ctx.from.id !== 5522146122) {
		await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return
	}
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	const { data, error } = await supabase.from("groups").select("*")
	if (error || !data || data.length === 0) {
		await ctx.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.")
		return
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –≤ –∫–∞–Ω–∞–ª
	for (const group of data) {
		await bot.api.sendMessage(
			CHANNEL_ID,
			`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\n‚ô® *–§–æ—Ä–º–∞—Ç:* ${group.format}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}\n\n‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${group.description}\n\nüõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${group.contact}\nüåê *–°—Å—ã–ª–∫–∞:* ${group.link}`,
			{ parse_mode: "Markdown" },
		)
	}
	// –¶–∏–∫–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
	// for (const channelId of CHANNEL_IDS) {
	// 	await bot.api.sendMessage(channelId, `üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${channelId.name}\n‚ô® *–§–æ—Ä–º–∞—Ç:* ${channelId.format}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${channelId.community}\n\n‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${channelId.description}\n\nüõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${channelId.contact}\nüåê *–°—Å—ã–ª–∫–∞:* ${channelId.link}`, { parse_mode: "Markdown" })
	// }
	await ctx.reply("–í—Å–µ –≥—Ä—É–ø–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª(-—ã).")
})

bot.on("message:text", async ctx => {
	const step = ctx.session.step
	// –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
	if (step === "search_community") {
		const community = ctx.message.text.trim()

		try {
			const { data, error } = await supabase
				.from("groups")
				.select("*")
				.ilike("community", `%${community}%`)
			if (error || !data.length) {
				await ctx.reply("üîç –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			} else {
				for (const group of data) {
					await ctx.reply(
						`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}`,
						{ parse_mode: "Markdown" },
					)
				}
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∂–µ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É?", {
			reply_markup: new InlineKeyboard()
				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
				.row()
				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time"),
		})

		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
	}
	// –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
	else if (step === "search_format") {
		const format = ctx.message.text.trim()

		try {
			const { data, error } = await supabase
				.from("groups")
				.select("*")
				.ilike("format", `%${format}%`)
			if (error || !data.length) {
				await ctx.reply("üîç –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			} else {
				for (const group of data) {
					await ctx.reply(
						`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}`,
						{ parse_mode: "Markdown" },
					)
				}
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏–ª–∏ –∂–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É?", {
			reply_markup: new InlineKeyboard()
				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time")
				.row()
				.text("‚ô® –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É", "search_format"),
		})

		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
	}
	// –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	else if (step === "search_time") {
		const time = ctx.message.text.trim()

		try {
			const { data, error } = await supabase.from("groups").select("*").eq("time", time)
			if (error || !data.length) {
				await ctx.reply("üîç –ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
			} else {
				for (const group of data) {
					await ctx.reply(`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\n‚è∞ *–í—Ä–µ–º—è:* ${group.time}`, {
						parse_mode: "Markdown",
					})
				}
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∂–µ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É?", {
			reply_markup: new InlineKeyboard()
				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
				.row()
				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time"),
		})

		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
	}
})
// —Å—Ç–∞—Ä—ã–π –∫–æ–¥
// bot.on("message:text", async ctx => {
// 	const step = ctx.session.step
// 	// –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
// 	if (step === "search_community") {
// 		const community = ctx.message.text.trim()
// 		try {
// 			const { data, error } = await supabase
// 				.from("groups")
// 				.select("*")
// 				.ilike("community", `%${community}%`)
// 			if (error || !data.length) {
// 				await ctx.reply("üîç –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
// 			} else {
// 				for (const group of data) {
// 					await ctx.reply(
// 						`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}`,
// 						{ parse_mode: "Markdown" },
// 					)
// 				}
// 			}
// 		} catch (error) {
// 			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:", error)
// 			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
// 		}
// 		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
// 		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∂–µ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É?", {
// 			reply_markup: new InlineKeyboard()
// 				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
// 				.row()
// 				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time"),
// 		})
// 		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
// 	}
// 	// –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
// 	if (step === "search_format") {
// 		const format = ctx.message.text.trim()
// 		try {
// 			const { data, error } = await supabase
// 				.from("groups")
// 				.select("*")
// 				.ilike("format", `%${format}%`)
// 			if (error || !data.length) {
// 				await ctx.reply("üîç –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
// 			} else {
// 				for (const group of data) {
// 					await ctx.reply(
// 						`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}`,
// 						{ parse_mode: "Markdown" },
// 					)
// 				}
// 			}
// 		} catch (error) {
// 			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:", error)
// 			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
// 		}
// 		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
// 		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏–ª–∏ –∂–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É?", {
// 			reply_markup: new InlineKeyboard()
// 				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
// 				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time")
// 				.row()
// 				.text("‚ô® –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É", "search_format"),
// 		})
// 		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
// 	}
// 	// –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
// 	else if (step === "search_time") {
// 		const time = ctx.message.text.trim()
// 		try {
// 			const { data, error } = await supabase.from("groups").select("*").eq("time", time)
// 			if (error || !data.length) {
// 				await ctx.reply("üîç –ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
// 			} else {
// 				for (const group of data) {
// 					await ctx.reply(`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\n‚è∞ *–í—Ä–µ–º—è:* ${group.time}`, {
// 						parse_mode: "Markdown",
// 					})
// 				}
// 			}
// 		} catch (error) {
// 			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", error)
// 			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
// 		}
// 		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
// 		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∂–µ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É?", {
// 			reply_markup: new InlineKeyboard()
// 				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
// 				.row()
// 				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time"),
// 		})
// 		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
// 	}
// 	// –ü–æ—à–∞–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
// 	else if (step === "name") {
// 		ctx.session.groupData.name = ctx.message.text.trim()
// 		ctx.session.step = "community"
// 		await ctx.reply("üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ (–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞):")
// 	} else if (step === "community") {
// 		const community = ctx.message.text.trim()
// 		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
// 		if (community !== "-") {
// 			ctx.session.groupData.community = community
// 		}
// 		ctx.session.step = "time"
// 		await ctx.reply("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00):")
// 	} else if (step === "time") {
// 		const time = ctx.message.text.trim()
// 		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 00:00)
// 		const timeRegex = /^([0-1]?[0-9]|2[0-3]):([0-5]?[0-9])$/
// 		if (!timeRegex.test(time)) {
// 			await ctx.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00.")
// 			return
// 		}
// 		ctx.session.groupData.time = time
// 		ctx.session.step = "format"
// 		await ctx.reply("‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_")
// 	} else if (step === "format") {
// 		const format = ctx.message.text.trim()
// 		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
// 		if (format !== "-") {
// 			ctx.session.groupData.format = format
// 		}
// 		ctx.session.step = "description"
// 		await ctx.reply("‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_")
// 	} else if (step === "description") {
// 		const description = ctx.message.text.trim()
// 		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
// 		if (description !== "-") {
// 			ctx.session.groupData.description = description
// 		}
// 		ctx.session.step = "link"
// 		await ctx.reply(
// 			"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\nüëâ –ï—Å–ª–∏ *Telegram*, —Ç–æ –ø–∏—à–∏—Ç–µ *@–ù–∞–∑–≤–∞–Ω–∏–µ*\nüëâ –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏, —Ç–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å *https://*\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
// 		)
// 	} else if (step === "link") {
// 		const link = ctx.message.text.trim()
// 		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
// 		if (link !== "-") {
// 			ctx.session.groupData.link = link
// 		}
// 		ctx.session.step = "contact"
// 		await ctx.reply("üõú –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç *(–ü–ì / –ü–ì–û / –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏):*")
// 	} else if (step === "contact") {
// 		const contact = ctx.message.text.trim()
// 		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
// 		if (contact !== "-") {
// 			ctx.session.groupData.contact = contact
// 		}
// 		const groupData = ctx.session.groupData
// 		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
// 		if (!groupData.name) {
// 			await ctx.reply("–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ —É–∫–∞–∑–∞–Ω–æ.")
// 			return
// 		}
// 		// –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
// 		if (!groupData.name || !groupData.community || !groupData.contact) {
// 			await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
// 			return
// 		}
// 		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Markdown
// 		function escapeMarkdown(text) {
// 			return text
// 				.replace(/_/g, "\\_") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º _
// 				.replace(/\*/g, "\\*") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º *
// 				.replace(/\[/g, "\\[") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º [
// 				.replace(/]/g, "\\]") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º ]
// 				.replace(/\(/g, "\\(") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º (
// 				.replace(/\)/g, "\\)") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º )
// 				.replace(/~/g, "\\~") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º ~
// 				.replace(/`/g, "\\`") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º `
// 				.replace(/>/g, "\\>") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º >
// 				.replace(/#/g, "\\#") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º #
// 				.replace(/\+/g, "\\+") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º +
// 				.replace(/-/g, "\\-") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º -
// 				.replace(/=/g, "\\=") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º =
// 				.replace(/\|/g, "\\|") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º |
// 				.replace(/\./g, ".") // –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É
// 				.replace(/!/g, "\\!") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º !
// 		}
// 		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ "-"
// 		let message = `üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdown(groupData.name)}\n\n`
// 		if (groupData.community && groupData.community !== "-") {
// 			message += `üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${escapeMarkdown(groupData.community)}\n`
// 		}
// 		if (groupData.time && groupData.time !== "-") {
// 			message += `‚è∞ *–í—Ä–µ–º—è:* ${escapeMarkdown(groupData.time)}\n`
// 		}
// 		if (groupData.format && groupData.format !== "-") {
// 			message += `‚ô® *–§–æ—Ä–º–∞—Ç:* ${escapeMarkdown(groupData.format)}\n`
// 		}
// 		if (groupData.description && groupData.description !== "-") {
// 			message += `\n‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(groupData.description)}\n\n`
// 		}
// 		if (groupData.contact && groupData.contact !== "-") {
// 			message += `üõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${escapeMarkdown(groupData.contact)}\n`
// 		}
// 		if (groupData.link && groupData.link !== "-") {
// 			message += `üåê *–°—Å—ã–ª–∫–∞:* ${escapeMarkdown(groupData.link)}`
// 		}
// 		try {
// 			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
// 			const { data, error } = await supabase.from("groups").insert([
// 				{
// 					name: groupData.name,
// 					format: groupData.format,
// 					community: groupData.community,
// 					description: groupData.description,
// 					contact: groupData.contact,
// 					link: groupData.link,
// 					time: groupData.time, // –î–æ–±–∞–≤–∏–ª–∏ –≤—Ä–µ–º—è
// 					created_at: new Date().toISOString(),
// 				},
// 			])
// 			if (error) {
// 				console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ë–î:", error)
// 				await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
// 				return
// 			}
// 			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
// 			await bot.api.sendMessage(CHANNEL_ID, message, { parse_mode: "Markdown" })
// 			// –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
// 			await ctx.reply("*–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞* üéâ\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start", {
// 				parse_mode: "Markdown",
// 				reply_markup: new InlineKeyboard().url(
// 					"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
// 					"https://t.me/trust_unity",
// 				),
// 			})
// 			// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
// 			ctx.session.groupData = {}
// 			ctx.session.step = undefined
// 		} catch (err) {
// 			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", err)
// 			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
// 		}
// 	}
// })
// –í—ã–Ω–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
function escapeMarkdown(text) {
	return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&") // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
}
// –í—ã–Ω–µ—Å—Ç–∏ —à–∞–≥–∏ –≤ –º–∞–ø–ø–∏–Ω–≥
const steps = {
	name: {
		message: "üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
		next: "community",
	},
	community: {
		message: "üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ (–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞):",
		next: "time",
	},
	time: {
		message: "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00):",
		validate: text =>
			/^([0-1]?[0-9]|2[0-3]):([0-5]?[0-9])$/.test(text) ||
			"‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00.",
		next: "format",
	},
	format: {
		message: "‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		next: "description",
	},
	description: {
		message: "‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		next: "link",
	},
	link: {
		message:
			"üåê –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (–Ω–∞—á–∏–Ω–∞—è —Å https://):\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		next: "contact",
	},
	contact: {
		message: "üõú –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–ü–ì / –ü–ì–û / –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏):",
		next: null,
	},
}
bot.on("message:text", async ctx => {
	const step = ctx.session.step
	if (!step || !(step in steps)) return
	const currentStep = steps[step]
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	if (currentStep.validate) {
		const validationResult = currentStep.validate(ctx.message.text.trim())
		if (validationResult !== true) {
			await ctx.reply(validationResult)
			return
		}
	}
	ctx.session.groupData[step] = ctx.message.text.trim()
	ctx.session.step = currentStep.next
	if (currentStep.next) {
		await ctx.reply(steps[currentStep.next].message)
	} else {
		// –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		const { name, community, time, format, description, link, contact } =
			ctx.session.groupData
		const message =
			`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdown(name)}\n` +
			(community ? `üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${escapeMarkdown(community)}\n` : "") +
			(time ? `‚è∞ *–í—Ä–µ–º—è:* ${escapeMarkdown(time)}\n` : "") +
			(format ? `‚ô® *–§–æ—Ä–º–∞—Ç:* ${escapeMarkdown(format)}\n` : "") +
			(description ? `‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(description)}\n` : "") +
			(contact ? `üõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${escapeMarkdown(contact)}\n` : "") +
			(link ? `üåê *–°—Å—ã–ª–∫–∞:* ${escapeMarkdown(link)}` : "")
		try {
			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
			await supabase
				.from("groups")
				.insert([{ name, community, time, format, description, link, contact }])
			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
			await bot.api.sendMessage(CHANNEL_ID, message, { parse_mode: "Markdown" })
			await ctx.reply("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üéâ\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start", {
				reply_markup: new grammy_1.InlineKeyboard().text("‚¨Ö –ù–∞–∑–∞–¥", "/start"),
			})
			// –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
			ctx.session.groupData = {}
			ctx.session.step = undefined
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}
})
// exports.default = (0, grammy_1.webhookCallback)(bot, "https");
bot.start()
