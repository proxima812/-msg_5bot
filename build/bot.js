"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parse_mode_1 = require("@grammyjs/parse-mode");
const supabase_js_1 = require("@supabase/supabase-js");
const grammy_1 = require("grammy");
const supabase = (0, supabase_js_1.createClient)("https://fkwivycaacgpuwfvozlp.supabase.co", process.env.SP_API_SECRET);
const token = process.env.TOKEN;
if (!token)
    throw new Error("TOKEN is unset");
const bot = new grammy_1.Bot(token);
const CHANNEL_ID = "-1002387924511";
bot.use((0, grammy_1.session)({ initial: () => ({ groupData: {} }) })); // –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(parse_mode_1.hydrateReply); // –¥–ª—è –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
bot.api.config.use((0, parse_mode_1.parseMode)("Markdown")); // –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const resetSession = (ctx) => {
    ctx.session.groupData = {};
    ctx.session.step = undefined;
};
const steps = {
    name: {
        message: "üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
        next: "community",
    },
    community: {
        message: "üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ (–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞):",
        next: "time",
    },
    time: {
        message: "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00):",
        validate: (text) => /^([0-1]?[0-9]|2[0-3]):([0-5]?[0-9])$/.test(text) ||
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00.",
        next: "format",
    },
    format: {
        message: "‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:",
        next: "description",
    },
    description: {
        message: "‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
        next: "link",
    },
    link: {
        message: "üëâ –ï—Å–ª–∏ Telegram, —Ç–æ –ø–∏—à–∏—Ç–µ *@–ù–∞–∑–≤–∞–Ω–∏–µ*\nüëâ –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏, —Ç–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å *https://*",
        next: "contact",
    },
    contact: {
        message: "üõú –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–ü–ì / –ü–ì–û / –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏):",
        next: null,
    },
};
bot.command("start", async (ctx) => {
    resetSession(ctx);
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        reply_markup: new grammy_1.InlineKeyboard()
            .text("üî• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üî•", "add_group")
            .row()
            .url("üë• –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://t.me/trust_unity")
            .row()
            .url("üåê –°–∞–π—Ç, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://ppros.vercel.app/")
            .row()
            .text("üî∏ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ üî∏", "show_text"),
    });
});
bot.on("callback_query:data", async (ctx) => {
    const data = ctx.callbackQuery.data;
    if (data === "show_text") {
        await ctx.answerCallbackQuery();
        await ctx.reply("–ë–æ—Ç –ø–æ—Å—Ç–∏—Ç –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ (-100238792451), —á—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º?\n\n- –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É.\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É –º–µ–Ω—è, –∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ —Å–µ–±–µ –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @legion_free\n\n–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ https://github.com/proxima812/-msg_5bot", { parse_mode: "HTML" });
    }
    if (data === "add_group") {
        resetSession(ctx);
        ctx.session.step = "name";
        await ctx.reply(steps.name.message);
    }
});
function escapeMarkdown(text) {
    return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&");
}
bot.on("message:text", async (ctx) => {
    const step = ctx.session.step;
    if (!step || !(step in steps))
        return;
    const currentStep = steps[step];
    if (currentStep.validate) {
        const validationResult = currentStep.validate(ctx.message.text.trim());
        if (validationResult !== true) {
            await ctx.reply(validationResult);
            return;
        }
    }
    ctx.session.groupData[step] = ctx.message.text.trim();
    ctx.session.step = currentStep.next;
    if (currentStep.next) {
        await ctx.reply(steps[currentStep.next].message);
    }
    else {
        const { name, community, time, format, description, link, contact } = ctx.session.groupData;
        const message = `üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdown(name)}\n` +
            (community ? `üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${escapeMarkdown(community)}\n` : "") +
            (time ? `‚è∞ *–í—Ä–µ–º—è:* ${escapeMarkdown(time)}\n` : "") +
            (format ? `‚ô® *–§–æ—Ä–º–∞—Ç:* ${escapeMarkdown(format)}\n` : "") +
            (description ? `‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(description)}\n` : "") +
            (contact ? `üõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${escapeMarkdown(contact)}\n` : "") +
            (link ? `üåê *–°—Å—ã–ª–∫–∞:* ${escapeMarkdown(link)}` : "");
        try {
            await supabase
                .from("groups")
                .insert([{ name, community, time, format, description, link, contact }]);
            await bot.api.sendMessage(CHANNEL_ID, message, { parse_mode: "Markdown" });
            await ctx.reply("*–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üéâ*\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start", {
                reply_markup: new grammy_1.InlineKeyboard().url("–°–º–æ—Ç—Ä–µ—Ç—å", "https://t.me/trust_unity"),
            });
            ctx.session.groupData = {};
            ctx.session.step = undefined;
        }
        catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
});
exports.default = (0, grammy_1.webhookCallback)(bot, "https");
