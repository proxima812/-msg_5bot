"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv").config();
const supabase_js_1 = require("@supabase/supabase-js");
const grammy_1 = require("grammy");
const supabase = (0, supabase_js_1.createClient)("https://fkwivycaacgpuwfvozlp.supabase.co", // URL –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase
process.env.SP_API_SECRET);
const token = process.env.TOKEN;
if (!token)
    throw new Error("TOKEN is unset");
const bot = new grammy_1.Bot(token);
// -1002387924511
const CHANNEL_ID = "-1002387924511"; // ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
// –ö–æ–º–∞–Ω–¥–∞ /add_card
bot.command("add_card", async (ctx) => {
    const userMessage = ctx.message.text.replace("/add_card", "").trim();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —Å—Å—ã–ª–∫–∏
    const regex = /^https:\/\/t\.me\/([a-zA-Z0-9_]+)\/(\d+)$/;
    const match = userMessage.match(regex);
    if (!match) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/add_card https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†_–ü–û–°–¢–ê`", { parse_mode: "Markdown" });
        return;
    }
    const userId = ctx.from.id;
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { data, error } = await supabase
            .from("posts")
            .insert([{ desc: userMessage, userId }]);
        if (error) {
            console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ë–î:", error);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.");
            return;
        }
        // –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        await ctx.reply("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
        // –ü—É–±–ª–∏–∫—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–∞–Ω–∞–ª
        await bot.api.sendMessage(CHANNEL_ID, `–ù–æ–≤–∞—è –ø–æ—Å—Ç:\n${userMessage}`);
    }
    catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ Supabase
async function deleteCard(cardId) {
    const { data, error } = await supabase.from("posts").delete().eq("id", cardId); // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º id
    if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", error);
        return false;
    }
    return true;
}
async function deleteGroup(cardId) {
    const { data, error } = await supabase.from("posts").delete().eq("id", groupId); // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º id
    if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error);
        return false;
    }
    return true;
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
    const userId = ctx.from.id;
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = new grammy_1.InlineKeyboard();
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"
    keyboard.text("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", "add_card");
    keyboard.row();
    // keyboard.text("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", "add_group")
    // keyboard.row()
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"
    keyboard.text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", "view_cards");
    keyboard.row();
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        reply_markup: keyboard, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    });
});
// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx) {
    const keyboard = new grammy_1.InlineKeyboard()
        .text("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", "add_card")
        // .text("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", "add_group")
        .row()
        .text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", "view_cards");
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        reply_markup: keyboard,
    });
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", async (ctx) => {
    try {
        const data = ctx.callbackQuery.data;
        if (data === "add_card") {
            // –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
            await ctx.answerCallbackQuery();
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            await ctx.reply("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/add_card https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†_–ü–û–°–¢–ê`", { parse_mode: "Markdown" });
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            const keyboard = new grammy_1.InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu");
            await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
                reply_markup: keyboard,
            });
        }
        else if (data === "view_cards") {
            const userId = ctx.from.id;
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
            const cards = await getUserCards(userId);
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫
            if (cards.length === 0) {
                await ctx.answerCallbackQuery();
                await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.");
                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                const keyboard = new grammy_1.InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu");
                await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
                    reply_markup: keyboard,
                });
                return;
            }
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            const keyboard = new grammy_1.InlineKeyboard();
            cards.forEach(card => {
                const formattedDesc = card.desc.replace(/^https?:\/\/t\.me\//, "t.me/");
                // –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                const shortDesc = formattedDesc.length > 30 ? `${formattedDesc.slice(0, 30)}...` : formattedDesc;
                keyboard.text(`#${card.id}: ${shortDesc}`, `view_card_${card.id}`);
                keyboard.text("üóë –£–¥–∞–ª–∏—Ç—å", `delete_card_${card.id}`).row();
            });
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu");
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await ctx.answerCallbackQuery();
            await ctx.reply("–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", {
                reply_markup: keyboard,
            });
        }
        else if (data === "main_menu") {
            // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await ctx.answerCallbackQuery();
            await showMainMenu(ctx);
        }
        else if (data.startsWith("delete_card_")) {
            const cardId = data.replace("delete_card_", "");
            // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const { error } = await supabase.from("posts").delete().eq("id", cardId);
            if (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", error);
                await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏." });
                return;
            }
            // –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            await ctx.answerCallbackQuery({ text: "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞." });
            await ctx.reply(`–ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID ${cardId} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`);
        }
        else {
            await ctx.answerCallbackQuery({ text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞." });
        }
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", error);
        try {
            await ctx.answerCallbackQuery({ text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." });
        }
        catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:", e);
        }
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
bot.callbackQuery(/delete_card_(\d+)/, async (ctx) => {
    const userId = ctx.from.id;
    const cardId = ctx.match[1];
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const cards = await getUserCards(userId);
    const card = cards.find(card => card.id.toString() === cardId.toString());
    if (!card) {
        await ctx.answerCallbackQuery("–≠—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.");
        return;
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const success = await deleteCard(cardId);
    if (success) {
        await ctx.answerCallbackQuery("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!");
        await ctx.editMessageText(`–ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`);
    }
    else {
        await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.");
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"
bot.callbackQuery(/view_card_(\d+)/, async (ctx) => {
    const cardId = ctx.match[1];
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    const { data, error } = await supabase
        .from("posts")
        .select("*")
        .eq("id", cardId)
        .single(); // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º id
    if (error || !data) {
        await ctx.answerCallbackQuery("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
    }
    await ctx.answerCallbackQuery(); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å (—É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
    const shortDesc = data.desc.replace(/^https?:\/\/t\.me\//, "t.me/");
    await ctx.reply(`#${data.id}:\n${shortDesc}`);
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_card
bot.on("message:text", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã /add_card
    if (!ctx.message.text.startsWith("/add_card")) {
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /add_card
    }
    // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º URL
    const userMessage = ctx.message.text.replace("/add_card", "").trim(); // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /add_card –∏–∑ —Ç–µ–∫—Å—Ç–∞
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    const regex = /^https:\/\/t\.me\/([a-zA-Z0-9_]+)\/(\d+)$/; // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†
    const match = userMessage.match(regex);
    if (!match) {
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†. –ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/trust_unity/8");
        return;
    }
    const userId = ctx.message.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        // –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
        const { data, error } = await supabase
            .from("posts") // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ 'posts'
            .insert([
            {
                desc: userMessage,
                userId: userId,
            },
        ]);
        if (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ Supabase:", error.message);
            ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.");
            return;
        }
        console.log("–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", userMessage);
        ctx.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∞!");
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Supabase:", error);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.");
    }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
async function getUserCards(userId) {
    const { data, error } = await supabase
        .from("posts")
        .select("id, desc")
        .eq("userId", userId);
    if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:", error);
        return [];
    }
    return data || [];
}
exports.default = (0, grammy_1.webhookCallback)(bot, "http");
