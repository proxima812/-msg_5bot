import { hydrateReply, parseMode, type ParseModeFlavor } from "@grammyjs/parse-mode"
import { createClient } from "@supabase/supabase-js"

import {
	Bot,
	Context,
	InlineKeyboard,
	session,
	SessionFlavor,
	webhookCallback,
} from "grammy"

const supabase = createClient(
	"https://fkwivycaacgpuwfvozlp.supabase.co",
	process.env.SP_API_SECRET,
)
const token = process.env.TOKEN
if (!token) throw new Error("TOKEN is unset")
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤
interface GroupData {
	name?: string
	format?: string
	community?: string
	description?: string
	link?: string
	time?: string
	contact?: string
}

interface SessionData {
	groupData: GroupData
	step?: string
}

type MyContext = Context & SessionFlavor<SessionData> & ParseModeFlavor

const bot = new Bot<MyContext>(token)
const CHANNEL_ID = "-1002387924511"

// –ü–∏—à–µ—à—å id—à–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤, –∫—É–¥–∞ –ø–æ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–æ–º –∑–∞–ø–∏—Å–∏.
// const CHANNEL_IDS = ["channel_id_1", "channel_id_2", "channel_id_3"]

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
bot.use(session({ initial: (): SessionData => ({ groupData: {} }) })) // –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(hydrateReply) // –¥–ª—è –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
bot.api.config.use(parseMode("Markdown")) // –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
bot.command("start", async ctx => {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞
	ctx.session.step = undefined

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: new InlineKeyboard()
			.text("üî• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üî•", "add_group")
			.row()
			.url("üë• –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://t.me/trust_unity")
			.row()
			.url("üåê –°–∞–π—Ç, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://ppros.vercel.app/")
			.row()
			.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
			.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time")
			.row()
			.text("üî∏ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ üî∏", "show_text")
			.row()
			.text("‚ô® –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É", "search_format"),
	})
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_group
bot.on("callback_query", async ctx => {
	const data = ctx.callbackQuery.data
	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
	if (data === "show_text") {
		await ctx.answerCallbackQuery()
		await ctx.reply(
			"–ë–æ—Ç –ø–æ—Å—Ç–∏—Ç –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ (-100238792451), —á—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º?\n\n- –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É.\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É –º–µ–Ω—è, –∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ —Å–µ–±–µ –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @legion_free\n\n–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ https://github.com/proxima812/-msg_5bot",
			{ parse_mode: "HTML" },
		)
	}
	// –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
	if (data === "add_group") {
		await ctx.answerCallbackQuery()
		await ctx.reply("üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
		ctx.session.step = "name" // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
	}
})
// –ò–∑ –ë–î –≤—ã–ª–æ–∂–∏—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ –∫–∞–Ω–∞–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –ë–î
// bot.command("show_groups", async ctx => {
// 	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
// 	if (ctx.from.id !== 5522146122) {
// 		await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
// 		return
// 	}
// 	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// 	const { data, error } = await supabase.from("groups").select("*")
// 	if (error || !data || data.length === 0) {
// 		await ctx.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.")
// 		return
// 	}
// 	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –≤ –∫–∞–Ω–∞–ª
// 	for (const group of data) {
// 		await bot.api.sendMessage(
// 			CHANNEL_ID,
// 			`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\n‚ô® *–§–æ—Ä–º–∞—Ç:* ${group.format}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}\n\n‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${group.description}\n\nüõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${group.contact}\nüåê *–°—Å—ã–ª–∫–∞:* ${group.link}`,
// 			{ parse_mode: "Markdown" },
// 		)
// 	}

// 	// –¶–∏–∫–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
// 	// for (const channelId of CHANNEL_IDS) {
// 	// 	await bot.api.sendMessage(channelId, `üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${channelId.name}\n‚ô® *–§–æ—Ä–º–∞—Ç:* ${channelId.format}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${channelId.community}\n\n‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${channelId.description}\n\nüõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${channelId.contact}\nüåê *–°—Å—ã–ª–∫–∞:* ${channelId.link}`, { parse_mode: "Markdown" })
// 	// }

// 	await ctx.reply("–í—Å–µ –≥—Ä—É–ø–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª(-—ã).")
// })

// –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤
bot.on("message:text", async ctx => {
	const step = ctx.session.step
	// –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
	if (step === "search_community") {
		const community = ctx.message.text.trim()

		try {
			const { data, error } = await supabase
				.from("groups")
				.select("*")
				.ilike("community", `%${community}%`)
			if (error || !data.length) {
				await ctx.reply("üîç –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			} else {
				for (const group of data) {
					await ctx.reply(
						`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}`,
						{ parse_mode: "Markdown" },
					)
				}
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∂–µ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É?", {
			reply_markup: new InlineKeyboard()
				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
				.row()
				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time"),
		})

		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
	}
	// –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
	if (step === "search_format") {
		const format = ctx.message.text.trim()

		try {
			const { data, error } = await supabase
				.from("groups")
				.select("*")
				.ilike("format", `%${format}%`)
			if (error || !data.length) {
				await ctx.reply("üîç –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			} else {
				for (const group of data) {
					await ctx.reply(
						`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${group.community}`,
						{ parse_mode: "Markdown" },
					)
				}
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏–ª–∏ –∂–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É?", {
			reply_markup: new InlineKeyboard()
				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time")
				.row()
				.text("‚ô® –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É", "search_format"),
		})

		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
	}
	// –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	else if (step === "search_time") {
		const time = ctx.message.text.trim()

		try {
			const { data, error } = await supabase.from("groups").select("*").eq("time", time)
			if (error || !data.length) {
				await ctx.reply("üîç –ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
			} else {
				for (const group of data) {
					await ctx.reply(`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${group.name}\n‚è∞ *–í—Ä–µ–º—è:* ${group.time}`, {
						parse_mode: "Markdown",
					})
				}
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
		await ctx.reply("–ù–∞–π—Ç–∏ –µ—â–µ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∂–µ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É?", {
			reply_markup: new InlineKeyboard()
				.text("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É", "search_community")
				.row()
				.text("‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "search_time"),
		})

		ctx.session.step = undefined // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
	}
})

// –í—ã–Ω–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
function escapeMarkdown(text: string): string {
	return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&") // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
}

// –í—ã–Ω–µ—Å—Ç–∏ —à–∞–≥–∏ –≤ –º–∞–ø–ø–∏–Ω–≥
const steps = {
	name: {
		message: "üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
		next: "community",
	},
	community: {
		message: "üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ (–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞):",
		next: "time",
	},
	time: {
		message: "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00):",
		validate: (text: string) =>
			/^([0-1]?[0-9]|2[0-3]):([0-5]?[0-9])$/.test(text) ||
			"‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00.",
		next: "format",
	},
	format: {
		message: "‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		next: "description",
	},
	description: {
		message: "‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		next: "link",
	},
	link: {
		message:
			"üåê –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (–Ω–∞—á–∏–Ω–∞—è —Å https://):\n\n‚ùå _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		next: "contact",
	},
	contact: {
		message: "üõú –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–ü–ì / –ü–ì–û / –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏):",
		next: null,
	},
}

bot.on("message:text", async ctx => {
	const step = ctx.session.step

	if (!step || !(step in steps)) return

	const currentStep = steps[step]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	if (currentStep.validate) {
		const validationResult = currentStep.validate(ctx.message.text.trim())
		if (validationResult !== true) {
			await ctx.reply(validationResult as string)
			return
		}
	}

	ctx.session.groupData[step] = ctx.message.text.trim()
	ctx.session.step = currentStep.next

	if (currentStep.next) {
		await ctx.reply(steps[currentStep.next].message)
	} else {
		// –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		const { name, community, time, format, description, link, contact } =
			ctx.session.groupData

		const message =
			`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdown(name)}\n` +
			(community ? `üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${escapeMarkdown(community)}\n` : "") +
			(time ? `‚è∞ *–í—Ä–µ–º—è:* ${escapeMarkdown(time)}\n` : "") +
			(format ? `‚ô® *–§–æ—Ä–º–∞—Ç:* ${escapeMarkdown(format)}\n` : "") +
			(description ? `‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(description)}\n` : "") +
			(contact ? `üõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${escapeMarkdown(contact)}\n` : "") +
			(link ? `üåê *–°—Å—ã–ª–∫–∞:* ${escapeMarkdown(link)}` : "")

		try {
			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
			await supabase
				.from("groups")
				.insert([{ name, community, time, format, description, link, contact }])

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
			await bot.api.sendMessage(CHANNEL_ID, message, { parse_mode: "Markdown" })

			await ctx.reply("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üéâ\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start", {
				reply_markup: new InlineKeyboard().text("‚¨Ö –ù–∞–∑–∞–¥", "/start"),
			})

			// –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
			ctx.session.groupData = {}
			ctx.session.step = undefined
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}
})

export default webhookCallback(bot, "https")
