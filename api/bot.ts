require("dotenv").config()
import { createClient } from "@supabase/supabase-js"
import { Bot, InlineKeyboard, webhookCallback } from "grammy"

const supabase = createClient(
	"https://fkwivycaacgpuwfvozlp.supabase.co", // URL –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase
	process.env.SP_API_SECRET, // –í–∞—à –∫–ª—é—á API Supabase
)

const token = process.env.TOKEN
if (!token) throw new Error("TOKEN is unset")

const bot = new Bot(token)

// -1002387924511
const CHANNEL_ID = "-1002387924511" // ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

// –ö–æ–º–∞–Ω–¥–∞ /add_card
bot.command("add_card", async ctx => {
	const userMessage = ctx.message.text.replace("/add_card", "").trim()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —Å—Å—ã–ª–∫–∏
	const regex = /^https:\/\/t\.me\/([a-zA-Z0-9_]+)\/(\d+)$/
	const match = userMessage.match(regex)

	if (!match) {
		await ctx.reply(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/add_card https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†_–ü–û–°–¢–ê`",
			{ parse_mode: "Markdown" },
		)
		return
	}

	const userId = ctx.from.id

	try {
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		const { data, error } = await supabase
			.from("posts")
			.insert([{ desc: userMessage, userId }])

		if (error) {
			console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ë–î:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
			return
		}

		// –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
		await ctx.reply("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

		// –ü—É–±–ª–∏–∫—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–∞–Ω–∞–ª
		await bot.api.sendMessage(CHANNEL_ID, `–ù–æ–≤–∞—è –ø–æ—Å—Ç:\n${userMessage}`)
	} catch (err) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err)
		await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
})
// –ö–æ–º–∞–Ω–¥–∞ /add_group
bot.command("add_group", async ctx => {
	const userMessage = ctx.message.text.replace("/add_group", "").trim()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É —Å—Å—ã–ª–∫–∏
	const regex = /^https:\/\/t\.me\/([a-zA-Z0-9_]+)\/(\d+)$/
	const match = userMessage.match(regex)

	if (!match) {
		await ctx.reply(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/add_card https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†_–ü–û–°–¢–ê`",
			{ parse_mode: "Markdown" },
		)
		return
	}

	const userId = ctx.from.id

	try {
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		const { data, error } = await supabase
			.from("posts")
			.insert([{ desc: userMessage, userId }])

		if (error) {
			console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ë–î:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
			return
		}

		// –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
		await ctx.reply("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

		// –ü—É–±–ª–∏–∫—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–∞–Ω–∞–ª
		await bot.api.sendMessage(CHANNEL_ID, `–ù–æ–≤–∞—è –ø–æ—Å—Ç:\n${userMessage}`)
	} catch (err) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", err)
		await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ Supabase
async function deleteCard(cardId) {
	const { data, error } = await supabase.from("posts").delete().eq("id", cardId) // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º id

	if (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", error)
		return false
	}
	return true
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ Supabase
async function deleteGroup(groupId) {
	const { data, error } = await supabase.from("groups").delete().eq("id", groupId) // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º id

	if (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", error)
		return false
	}
	return true
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async ctx => {
	const userId = ctx.from.id

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	const keyboard = new InlineKeyboard()

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"
	keyboard.text("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", "add_card")
	keyboard.row()

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"
	keyboard.text("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", "add_group")
	keyboard.row()

	// keyboard.text("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", "add_group")
	// keyboard.row()

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"
	keyboard.text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", "view_cards")
	keyboard.row()

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã"
	keyboard.text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã", "view_groups")
	keyboard.row()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: keyboard, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	})
})

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx) {
	const keyboard = new InlineKeyboard()
		.text("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", "add_card")
		.text("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", "add_group")
		.row()
		.text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", "view_cards")
		.text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", "view_groups")

	await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: keyboard,
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", async ctx => {
	try {
		const data = ctx.callbackQuery.data

		if (data === "add_card") {
			// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
			await ctx.answerCallbackQuery()

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
			await ctx.reply(
				"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/add_card https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†_–ü–û–°–¢–ê`",
				{ parse_mode: "Markdown" },
			)

			// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
			const keyboard = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")
			await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
				reply_markup: keyboard,
			})
		} else if (data === "view_cards") {
			const userId = ctx.from.id

			// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
			const cards = await getUserCards(userId)

			// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫
			if (cards.length === 0) {
				await ctx.answerCallbackQuery()
				await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")

				// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
				const keyboard = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")
				await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
					reply_markup: keyboard,
				})
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
			const keyboard = new InlineKeyboard()
			cards.forEach(card => {
				const formattedDesc = card.desc.replace(/^https?:\/\/t\.me\//, "t.me/")

				// –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
				const shortDesc =
					formattedDesc.length > 30 ? `${formattedDesc.slice(0, 30)}...` : formattedDesc

				keyboard.text(`#${card.id}: ${shortDesc}`, `view_card_${card.id}`)
				keyboard.text("üóë –£–¥–∞–ª–∏—Ç—å", `delete_card_${card.id}`).row()
			})

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
			keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
			await ctx.answerCallbackQuery()
			await ctx.reply("–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", {
				reply_markup: keyboard,
			})
		} else if (data === "main_menu") {
			// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			await ctx.answerCallbackQuery()
			await showMainMenu(ctx)
		} else if (data.startsWith("delete_card_")) {
			const cardId = data.replace("delete_card_", "")

			// –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const { error } = await supabase.from("posts").delete().eq("id", cardId)

			if (error) {
				console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", error)
				await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏." })
				return
			}

			// –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
			await ctx.answerCallbackQuery({ text: "–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞." })
			await ctx.reply(`–ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID ${cardId} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`)
		} else {
			await ctx.answerCallbackQuery({ text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞." })
		}
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", error)
		try {
			await ctx.answerCallbackQuery({ text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." })
		} catch (e) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:", e)
		}
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", async ctx => {
	try {
		const data = ctx.callbackQuery.data

		if (data === "add_group") {
			// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
			await ctx.answerCallbackQuery()

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
			await ctx.reply(
				"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/add_card https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†_–ü–û–°–¢–ê`",
				{ parse_mode: "Markdown" },
			)

			// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
			const keyboard = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")
			await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
				reply_markup: keyboard,
			})
		} else if (data === "view_groups") {
			const userId = ctx.from.id

			// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
			const cards = await getUserGroups(userId)

			// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫
			if (cards.length === 0) {
				await ctx.answerCallbackQuery()
				await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.")

				// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
				const keyboard = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")
				await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
					reply_markup: keyboard,
				})
				return
			}

			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
			const keyboard = new InlineKeyboard()
			cards.forEach(group => {
				const formattedDesc = group.desc.replace(/^https?:\/\/t\.me\//, "t.me/")

				// –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
				const shortDesc =
					formattedDesc.length > 30 ? `${formattedDesc.slice(0, 30)}...` : formattedDesc

				keyboard.text(`#${group.id}: ${shortDesc}`, `view_group_${group.id}`)
				keyboard.text("üóë –£–¥–∞–ª–∏—Ç—å", `delete_group_${group.id}`).row()
			})

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
			keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
			await ctx.answerCallbackQuery()
			await ctx.reply("–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:", {
				reply_markup: keyboard,
			})
		} else if (data === "main_menu") {
			// –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			await ctx.answerCallbackQuery()
			await showMainMenu(ctx)
		} else if (data.startsWith("delete_group_")) {
			const groupId = data.replace("delete_group_", "")

			// –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const { error } = await supabase.from("groups").delete().eq("id", groupId)

			if (error) {
				console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error)
				await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã." })
				return
			}

			// –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
			await ctx.answerCallbackQuery({ text: "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞." })
			await ctx.reply(`–ì—Ä—É–ø–ø–∞ —Å ID ${groupId} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`)
		} else {
			await ctx.answerCallbackQuery({ text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞." })
		}
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", error)
		try {
			await ctx.answerCallbackQuery({ text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." })
		} catch (e) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query:", e)
		}
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
bot.callbackQuery(/delete_card_(\d+)/, async ctx => {
	const userId = ctx.from.id
	const cardId = ctx.match[1]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	const cards = await getUserCards(userId)

	const card = cards.find(card => card.id.toString() === cardId.toString())

	if (!card) {
		await ctx.answerCallbackQuery("–≠—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
		return
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	const success = await deleteCard(cardId)

	if (success) {
		await ctx.answerCallbackQuery("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
		await ctx.editMessageText(`–ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`)
	} else {
		await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
	}
})

bot.callbackQuery(/delete_group_(\d+)/, async ctx => {
	const userId = ctx.from.id
	const groupId = ctx.match[1]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	const groups = await getUserGroups(userId)

	const group = groups.find(group => group.id.toString() === groupId.toString())

	if (!group) {
		await ctx.answerCallbackQuery("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
		return
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	const success = await deleteGroup(groupId)

	if (success) {
		await ctx.answerCallbackQuery("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
		await ctx.editMessageText(`–ì—Ä—É–ø–ø–∞ ${cardId} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`)
	} else {
		await ctx.answerCallbackQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"
bot.callbackQuery(/view_card_(\d+)/, async ctx => {
	const cardId = ctx.match[1]

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
	const { data, error } = await supabase
		.from("posts")
		.select("*")
		.eq("id", cardId)
		.single() // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º id

	if (error || !data) {
		await ctx.answerCallbackQuery("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	await ctx.answerCallbackQuery() // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å (—É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
	const shortDesc = data.desc.replace(/^https?:\/\/t\.me\//, "t.me/")
	await ctx.reply(`#${data.id}:\n${shortDesc}`)
})

bot.callbackQuery(/view_groups_(\d+)/, async ctx => {
	const groupId = ctx.match[1]

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
	const { data, error } = await supabase
		.from("groups")
		.select("*")
		.eq("id", groupId)
		.single() // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º id

	if (error || !data) {
		await ctx.answerCallbackQuery("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	await ctx.answerCallbackQuery() // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å (—É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
	const shortDesc = data.desc.replace(/^https?:\/\/t\.me\//, "t.me/")
	await ctx.reply(`#${data.id}:\n${shortDesc}`)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_card
bot.on("message:text", async ctx => {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã /add_card
	if (!ctx.message.text.startsWith("/add_card")) {
		return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /add_card
	}

	// –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º URL
	const userMessage = ctx.message.text.replace("/add_card", "").trim() // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /add_card –∏–∑ —Ç–µ–∫—Å—Ç–∞

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
	const regex = /^https:\/\/t\.me\/([a-zA-Z0-9_]+)\/(\d+)$/ // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†
	const match = userMessage.match(regex)

	if (!match) {
		// –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		ctx.reply(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†. –ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/trust_unity/8",
		)
		return
	}

	const userId = ctx.message.from.id // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	try {
		// –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
		const { data, error } = await supabase
			.from("posts") // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ 'posts'
			.insert([
				{
					desc: userMessage, // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Å—ã–ª–∫–∞)
					userId: userId,
				},
			])

		if (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ Supabase:", error.message)
			ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
			return
		}

		console.log("–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", userMessage)
		ctx.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∞!")
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Supabase:", error)
		ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
	}
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_group
bot.on("message:text", async ctx => {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã /add_group
	if (!ctx.message.text.startsWith("/add_group")) {
		return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /add_group
	}

	// –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º URL
	const userMessage = ctx.message.text.replace("/add_group", "").trim() // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /add_group–∏–∑ —Ç–µ–∫—Å—Ç–∞

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
	const regex = /^https:\/\/t\.me\/([a-zA-Z0-9_]+)\/(\d+)$/ // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†
	const match = userMessage.match(regex)

	if (!match) {
		// –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		ctx.reply(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://t.me/–ö–ê–ù–ê–õ/–ù–û–ú–ï–†. –ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/trust_unity/8",
		)
		return
	}

	const userId = ctx.message.from.id // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	try {
		// –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
		const { data, error } = await supabase
			.from("groups") // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ 'posts'
			.insert([
				{
					name: userMessage, // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Å—ã–ª–∫–∞)
					userId: userId,
				},
			])

		if (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ Supabase:", error.message)
			ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
			return
		}

		console.log("–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", userMessage)
		ctx.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ì—Ä—É–ø–ø–∞!")
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Supabase:", error)
		ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
	}
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
async function getUserCards(userId) {
	const { data, error } = await supabase
		.from("posts")
		.select("id, desc")
		.eq("userId", userId)

	if (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:", error)
		return []
	}
	return data || []
}


async function getUserGroups(userId) {
	const { data, error } = await supabase
		.from("groups")
		.select("id, name")
		.eq("userId", userId)

	if (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø:", error)
		return []
	}
	return data || []
}

export default webhookCallback(bot, "http")
