import { autoRetry } from "@grammyjs/auto-retry"
import { hydrateReply, parseMode, type ParseModeFlavor } from "@grammyjs/parse-mode"
import { limit } from "@grammyjs/ratelimiter"
import { createClient } from "@supabase/supabase-js"

import {
	Bot,
	Context,
	InlineKeyboard,
	session,
	SessionFlavor,
	webhookCallback,
} from "grammy"

const supabase = createClient(
	"https://fkwivycaacgpuwfvozlp.supabase.co",
	process.env.SP_API_SECRET,
)
const token = process.env.TOKEN
if (!token) throw new Error("TOKEN is unset")
interface GroupData {
	name?: string
	format?: string
	community?: string
	description?: string
	link?: string
	time?: string
	contact?: string
	userId?: number // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ
	messageId?: number // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –≤ –∫–∞–Ω–∞–ª–µ
}

interface SessionData {
	groupData: GroupData
	step?: string
}

type MyContext = Context & SessionFlavor<SessionData> & ParseModeFlavor

const bot = new Bot<MyContext>(token)
const CHANNEL_ID = "-1002387924511"

bot.use(session({ initial: (): SessionData => ({ groupData: {} }) })) // –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(
	hydrateReply,
	limit({
		// –†–∞–∑—Ä–µ—à–∏—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã.
		timeFrame: 10000,
		limit: 6,
		// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
		onLimitExceeded: async ctx => {
			await ctx.reply(
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!",
			)
		},
		keyGenerator: ctx => {
			return ctx.from?.id.toString()
		},
	}),
) // –¥–ª—è –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
bot.api.config.use(
	parseMode("Markdown"),
	autoRetry({
		maxRetryAttempts: 2,
		maxDelaySeconds: 10,
		rethrowInternalServerErrors: true,
		rethrowHttpErrors: true,
	}),
) // –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

const resetSession = (ctx: MyContext) => {
	ctx.session.groupData = {}
	ctx.session.step = undefined
}

const steps = {
	name: {
		message: "üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
		next: "community",
	},
	community: {
		message: "üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ (–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞):",
		next: "time",
	},
	time: {
		message: "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00):",
		validate: (text: string) =>
			/^([0-1]?[0-9]|2[0-3]):([0-5]?[0-9])$/.test(text) ||
			"‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00.",
		next: "format",
	},
	format: {
		message: "‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:",
		next: "description",
	},
	description: {
		message: "‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
		next: "link",
	},
	link: {
		message:
			"üëâ –ï—Å–ª–∏ Telegram, —Ç–æ –ø–∏—à–∏—Ç–µ *@–ù–∞–∑–≤–∞–Ω–∏–µ*\nüëâ –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏, —Ç–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å *https://*",
		next: "contact",
	},
	contact: {
		message: "üõú –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–ü–ì / –ü–ì–û / –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏):",
		next: null,
	},
}

bot.command("start", async ctx => {
	resetSession(ctx)
	await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: new InlineKeyboard()
			.text("üî• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üî•", "add_group")
			.row()
			.text("üîé –ú–æ–∏ –≥—Ä—É–ø–ø—ã/–£–¥–∞–ª–∏—Ç—å", "my_groups")
			.row()
			.url("üë• –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://t.me/trust_unity")
			.row()
			.url("üåê –°–∞–π—Ç, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://ppros.vercel.app/")
			.row()
			.text("üî∏ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ üî∏", "show_text"),
	})
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º–∏ –∏–∑ –ë–î
async function createCommunityKeyboard() {
	const { data, error } = await supabase
		.from("groups")
		.select("community")
		.distinct()

	if (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤:", error)
		return new InlineKeyboard().text("–û—à–∏–±–∫–∞", "error")
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
	const keyboard = new InlineKeyboard()
	data.forEach((group, index) => {
		if (group.community) {
			keyboard.text(group.community, `community_${group.community}`)
		}
		if ((index + 1) % 2 === 0) {
			keyboard.row()
		}
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	if (data.length % 2 !== 0) {
		keyboard.row()
	}

	return keyboard
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
async function filterGroupsByCommunity(ctx, community) {
	try {
		const { data, error } = await supabase
			.from("groups")
			.select("name, messageId")
			.eq("community", community)

		if (error) throw error

		if (data && data.length > 0) {
			const keyboard = new InlineKeyboard()

			data.forEach((group, index) => {
				keyboard.text(group.name, `send_group_${group.messageId}`)
				if ((index + 1) % 2 === 0) {
					keyboard.row()
				}
			})

			if (data.length % 2 !== 0) {
				keyboard.row()
			}

			await ctx.reply(`–ì—Ä—É–ø–ø—ã –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "${community}":`, {
				reply_markup: keyboard,
			})
		} else {
			await ctx.reply(`–ù–µ—Ç –≥—Ä—É–ø–ø –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ "${community}".`)
		}
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø:", error)
		await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø.")
	}
}

bot.on("callback_query:data", async ctx => {
	const data = ctx.callbackQuery.data
	if (data === "show_text") {
		await ctx.answerCallbackQuery()
		await ctx.reply(
			"–ë–æ—Ç –ø–æ—Å—Ç–∏—Ç –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ (-100238792451), —á—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –≤–∞–º?\n\n- –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É.\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É –º–µ–Ω—è, –∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ —Å–µ–±–µ –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @legion_free\n\n–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ https://github.com/proxima812/-msg_5bot",
			{ parse_mode: "HTML" },
		)
	}
	if (data === "add_group") {
		resetSession(ctx)
		ctx.session.step = "name"
		await ctx.reply(steps.name.message)
	}
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –≥—Ä—É–ø–ø—ã/–£–¥–∞–ª–∏—Ç—å"
	if (data === "my_groups") {
		const userId = ctx.from?.id
		try {
			const { data, error } = await supabase
				.from("groups")
				.select("id, name, messageId")
				.eq("userId", userId)

			if (error) throw error
			if (data && data.length > 0) {
				const keyboard = new InlineKeyboard()

				data.forEach((group, index) => {
					keyboard.text(`üóë - ${group.name}`, `delete_group_${group.id}`)
					// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
					if ((index + 1) % 2 === 0) {
						keyboard.row()
					}
				})
				// –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
				if (data.length % 2 !== 0) {
					keyboard.row()
				}
				await ctx.reply("üìù –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:", {
					reply_markup: keyboard,
				})
			} else {
				await ctx.reply("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.")
		}
	}
	if (data.startsWith("delete_group_")) {
		const groupId = data.replace("delete_group_", "")

		try {
			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ –ë–î
			const { data: groupData, error: fetchError } = await supabase
				.from("groups")
				.select("messageId")
				.eq("id", groupId)
				.single()

			if (fetchError || !groupData) {
				await ctx.reply("–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
				return
			}

			const { messageId } = groupData

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
			if (messageId) {
				try {
					await bot.api.deleteMessage(CHANNEL_ID, messageId)
				} catch (deleteError) {
					console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:", deleteError)
					await ctx.reply(
						"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –Ω–æ –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
					)
				}
			}

			// –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			const { error: deleteError } = await supabase
				.from("groups")
				.delete()
				.eq("id", groupId)

			if (deleteError) throw deleteError

			await ctx.reply("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
		}
	}

	// 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –∫–∞–∫ —Ä–∞—Å—Å—ã–ª–∫—É"
	if (data === "add_broadcast_chat") {
		await ctx.answerCallbackQuery()
		await ctx.reply("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ä–∞—Å—Å—ã–ª–∫—É.")
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID –∫–∞–Ω–∞–ª–∞
		ctx.session.step = "add_broadcast_chat"
	}

	// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–§–∏–ª—å—Ç—Ä –≤—ã–≤–æ–¥–∏–º—ã—Ö –≥—Ä—É–ø–ø"
	if (data === "filter_groups") {
		await ctx.answerCallbackQuery()
		await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã:", {
			reply_markup: await createCommunityKeyboard(),
		})
	}

	// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
	if (data.startsWith("community_")) {
		const community = data.replace("community_", "")
		// –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
		await filterGroupsByCommunity(ctx, community)
	}
})

function escapeMarkdown(text: string): string {
	return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&")
}

bot.on("message:text", async ctx => {
	const step = ctx.session.step

	if (!step || !(step in steps)) return

	const currentStep = steps[step]

	if (currentStep.validate) {
		const validationResult = currentStep.validate(ctx.message.text.trim())
		if (validationResult !== true) {
			await ctx.reply(validationResult as string)
			return
		}
	}

	ctx.session.groupData[step] = ctx.message.text.trim()
	ctx.session.step = currentStep.next

	if (currentStep.next) {
		await ctx.reply(steps[currentStep.next].message)
	} else {
		const { name, community, time, format, description, link, contact } =
			ctx.session.groupData
		const userId = ctx.from?.id

		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		const message =
			`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapeMarkdown(name)}\n` +
			(community ? `üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${escapeMarkdown(community)}\n` : "") +
			(time ? `‚è∞ *–í—Ä–µ–º—è:* ${escapeMarkdown(time)}\n` : "") +
			(format ? `‚ô® *–§–æ—Ä–º–∞—Ç:* ${escapeMarkdown(format)}\n` : "") +
			(description ? `\n‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(description)}\n\n` : "") +
			(contact ? `üõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${escapeMarkdown(contact)}\n` : "") +
			(link ? `üåê *–°—Å—ã–ª–∫–∞:* ${escapeMarkdown(link)}` : "")

		try {
			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
			const sentMessage = await bot.api.sendMessage(CHANNEL_ID, message, {
				parse_mode: "Markdown",
			})

			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
			await supabase.from("groups").insert([
				{
					name,
					community,
					time,
					format,
					description,
					link,
					contact,
					userId,
					messageId: sentMessage.message_id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
				},
			])

			// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
			await ctx.reply("*–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üéâ*\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start", {
				reply_markup: new InlineKeyboard().url("–°–º–æ—Ç—Ä–µ—Ç—å", "https://t.me/trust_unity"),
			})

			// –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
			resetSession(ctx)
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
  }
  
  
  if (ctx.session.step === "add_broadcast_chat") {
		const chatId = ctx.message.text.trim()

		try {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É groupsList
			const { error } = await supabase.from("groupsList").insert([{ idGroup: chatId }])

			if (error) throw error

			await ctx.reply(`–ß–∞—Ç ${chatId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É!`)
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫—É:", error)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
		ctx.session.step = undefined
	}
})

bot.on("chat_member", async ctx => {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª
	const newStatus = ctx.chatMember.new_chat_member.status
	const isBotAdded = newStatus === "administrator"

	if (isBotAdded && ctx.chatMember.from) {
		const userId = ctx.chatMember.from.id // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–∏–≤—à–µ–≥–æ –±–æ—Ç–∞
		const chatId = ctx.chatMember.chat.id // ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		const keyboard = new InlineKeyboard().text("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è", "setup")

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		try {
			await bot.api.sendMessage(
				userId,
				`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${ctx.chatMember.from.first_name}! –ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å, –¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: —É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ @legion_free, —Ç–∞–∫–∂–µ (–ù–ö –î–µ–π—Å—Ç–≤–∏—è https://t.me/+unxSBy-6XyNTMy)`,
				{
					reply_markup: keyboard,
				},
			)
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", error)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ –ë–î
		try {
			const { error } = await supabase.from("groupsList").insert([{ idGroup: chatId }])

			if (error) throw error
		} catch (dbError) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ:", dbError)
		}
	}
})

export default webhookCallback(bot, "https")
