require("dotenv").config()
import { createClient } from "@supabase/supabase-js"
import {
	Bot,
	Context,
	InlineKeyboard,
	session,
	SessionFlavor,
	webhookCallback,
} from "grammy"

const supabase = createClient(
	"https://fkwivycaacgpuwfvozlp.supabase.co",
	process.env.SP_API_SECRET,
)

const token = process.env.TOKEN
if (!token) throw new Error("TOKEN is unset")

interface SessionData {
	groupData: {
		name?: string
		format?: string
		community?: string
		description?: string
		link?: string
		contact?: string
	}
	step?: string
}

type MyContext = Context & SessionFlavor<SessionData>

const bot = new Bot<MyContext>(token)
const CHANNEL_ID = "-1002387924511"

// Middleware for session handling
bot.use(session({ initial: (): SessionData => ({ groupData: {} }) }))

bot.command("start", async ctx => {
	ctx.session.step = undefined
	await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: new InlineKeyboard()
			.text("üî• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üî•", "add_group")
			.row()
			.url("üë• –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://t.me/trust_unity")
			.row()
			.url("üåê –°–∞–π—Ç, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://example.com"),
	})
})

bot.command("add_group", async ctx => {
	if (!ctx.session.groupData) {
		ctx.session.groupData = {}
	}
	await ctx.reply("üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
	ctx.session.step = "name"
})

bot.on("message:text", async ctx => {
	if (ctx.message.text.startsWith("/")) return

	const step = ctx.session.step
	const keyboard = new InlineKeyboard().text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip")

	if (step === "name") {
		ctx.session.groupData.name = ctx.message.text.trim()
		ctx.session.step = "format"
		await ctx.reply("‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:", { reply_markup: keyboard })
	} else if (step === "format") {
		ctx.session.groupData.format = ctx.message.text.trim() || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
		ctx.session.step = "community"
		await ctx.reply("üë• –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø—ã:")
	} else if (step === "community") {
		ctx.session.groupData.community = ctx.message.text.trim()
		ctx.session.step = "description"
		await ctx.reply("‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n(–ë–µ–∑ Premium –≠–º–æ–¥–∂–∏!)")
	} else if (step === "description") {
		ctx.session.groupData.description = ctx.message.text.trim()
		ctx.session.step = "link"
		await ctx.reply(
			"üåê –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\nüëâ –ï—Å–ª–∏ Telegram, —Ç–æ –ø–∏—à–∏—Ç–µ @–ù–∞–∑–≤–∞–Ω–∏–µ\nüëâ –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏, —Ç–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å https://",
			{ reply_markup: keyboard, parse_mode: "Markdown" },
		)
	} else if (step === "link") {
		ctx.session.groupData.link = ctx.message.text.trim() || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
		ctx.session.step = "contact"
		await ctx.reply(
			"üìû –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ü–ì/–ü–ì–û/–ö—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ —É–∫–∞–∑–∞–Ω–æ'):",
			{ reply_markup: keyboard },
		)
	} else if (step === "contact") {
		ctx.session.groupData.contact = ctx.message.text.trim() || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

		const groupData = ctx.session.groupData

		try {
			const { data, error } = await supabase.from("groups").insert([
				{
					name: groupData.name,
					format: groupData.format,
					community: groupData.community,
					description: groupData.description,
					link: groupData.link,
					contact: groupData.contact,
					created_at: new Date().toISOString(),
				},
			])

			if (error) {
				console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ë–î:", error)
				await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
				return
			}

			await ctx.reply("**–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞** üéâ", {
				parse_mode: "Markdown",
				reply_markup: new InlineKeyboard().url(
					"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
					"https://t.me/trust_unity",
				),
			})

			await bot.api.sendMessage(
				CHANNEL_ID,
				`üçÄ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${groupData.name}\n‚ô® **–§–æ—Ä–º–∞—Ç:** ${groupData.format}\nüë• **–°–æ–æ–±—â–µ—Å—Ç–≤–æ:** ${groupData.community}\n‚ú® **–û–ø–∏—Å–∞–Ω–∏–µ:** ${groupData.description}\nüåê **–°—Å—ã–ª–∫–∞:** ${groupData.link}\nüìû **–ö–æ–Ω—Ç–∞–∫—Ç:** ${groupData.contact}`,
				{ parse_mode: "Markdown" },
			)

			ctx.session.groupData = {}
			ctx.session.step = undefined
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", err)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}
})

bot.on("callback_query:data", async ctx => {
	const data = ctx.callbackQuery.data
	if (data === "skip") {
		const step = ctx.session.step

		if (step === "format") {
			ctx.session.groupData.format = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
			ctx.session.step = "community"
			await ctx.reply("üë• –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø—ã:")
		} else if (step === "link") {
			ctx.session.groupData.link = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
			ctx.session.step = "contact"
			await ctx.reply(
				"üìû –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ü–ì/–ü–ì–û/–ö—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ —É–∫–∞–∑–∞–Ω–æ'):",
			)
		} else if (step === "contact") {
			ctx.session.groupData.contact = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
			ctx.session.step = undefined
			await ctx.reply("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω.")
		}
		await ctx.answerCallbackQuery()
	}
})

export default webhookCallback(bot, "http")
