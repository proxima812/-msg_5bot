require("dotenv").config()
import { hydrateReply, parseMode, type ParseModeFlavor } from "@grammyjs/parse-mode"
import { createClient } from "@supabase/supabase-js"
import {
	Bot,
	Context,
	InlineKeyboard,
	session,
	SessionFlavor,
	webhookCallback,
} from "grammy"

const supabase = createClient(
	"https://fkwivycaacgpuwfvozlp.supabase.co",
	process.env.SP_API_SECRET,
)
const token = process.env.TOKEN
if (!token) throw new Error("TOKEN is unset")
interface SessionData {
	groupData: {
		name?: string
		format?: string
		community?: string
		description?: string
		link?: string
	}
	step?: string
}

// type MyContext = Context & SessionFlavor<SessionData>
type MyContext = Context & SessionFlavor<SessionData> & ParseModeFlavor

const bot = new Bot<MyContext>(token)
const CHANNEL_ID = "-1002387924511"

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
// bot.use(session({ initial: (): SessionData => ({ groupData: {} }) }))

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
bot.use(session({ initial: (): SessionData => ({ groupData: {} }) })) // –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(hydrateReply) // –¥–ª—è –≥–∏–¥—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
bot.api.config.use(parseMode("Markdown")) // –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
bot.command("start", async ctx => {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞
	ctx.session.step = undefined

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: new InlineKeyboard()
			.text("üî• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üî•", "add_group")
			.row()
			.url("üë• –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://t.me/trust_unity")
			.row()
			.url("üåê –°–∞–π—Ç, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://example.com"),
	})
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_group
bot.on("callback_query", async ctx => {
	const data = ctx.callbackQuery.data

	if (data === "add_group") {
		await ctx.answerCallbackQuery()
		await ctx.reply("üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
		ctx.session.step = "name" // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
	}
})

bot.command("show_groups", async ctx => {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if (ctx.from.id !== 5522146122) {
		await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	const { data, error } = await supabase.from("groups").select("*")

	if (error || !data || data.length === 0) {
		await ctx.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –≤ –∫–∞–Ω–∞–ª
	for (const group of data) {
		await bot.api.sendMessage(
			CHANNEL_ID,
			`üçÄ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${group.name}\n‚ô® **–§–æ—Ä–º–∞—Ç:** ${group.format}\nüë• **–°–æ–æ–±—â–µ—Å—Ç–≤–æ:** ${group.community}\n‚ú® **–û–ø–∏—Å–∞–Ω–∏–µ:** ${group.description}\nüåê **–°—Å—ã–ª–∫–∞:** ${group.link}`,
		)
	}

	await ctx.reply("–í—Å–µ –≥—Ä—É–ø–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª..")
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
// bot.on("message:text", async ctx => {
// 	if (ctx.message.text.startsWith("/")) return

// 	const step = ctx.session.step

// 	if (step === "name") {
// 		ctx.session.groupData.name = ctx.message.text.trim()
// 		ctx.session.step = "format"
// 		await ctx.reply("‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:")
// 	} else if (step === "format") {
// 		ctx.session.groupData.format = ctx.message.text.trim()
// 		ctx.session.step = "community"
// 		await ctx.reply("üë• –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø—ã:")
// 	} else if (step === "community") {
// 		ctx.session.groupData.community = ctx.message.text.trim()
// 		ctx.session.step = "description"
// 		await ctx.reply("‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
// 	} else if (step === "description") {
// 		ctx.session.groupData.description = ctx.message.text.trim()
// 		ctx.session.step = "link"
// 		await ctx.reply(
// 			"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\nüëâ –ï—Å–ª–∏ Telegram, —Ç–æ –ø–∏—à–∏—Ç–µ @–ù–∞–∑–≤–∞–Ω–∏–µ\nüëâ –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏, —Ç–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å https://",
// 		)
// 	} else if (step === "link") {
// 		ctx.session.groupData.link = ctx.message.text.trim()

// 		const groupData = ctx.session.groupData

// 		try {
// 			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
// 			const { data, error } = await supabase.from("groups").insert([
// 				{
// 					name: groupData.name,
// 					format: groupData.format,
// 					community: groupData.community,
// 					description: groupData.description,
// 					link: groupData.link,
// 					created_at: new Date().toISOString(),
// 				},
// 			])

// 			if (error) {
// 				console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ë–î:", error)
// 				await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
// 				return
// 			}

// 			await bot.api.sendMessage(
// 				CHANNEL_ID,
// 				`üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${groupData.name}\n‚ô® *–§–æ—Ä–º–∞—Ç:* ${groupData.format}\nüë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${groupData.community}\n‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${groupData.description}\nüåê *–°—Å—ã–ª–∫–∞:* ${groupData.link}`,
// 			)

// 			// –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
// 			await ctx.reply("*–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞* üéâ\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start", {
// 				parse_mode: "Markdown",
// 				reply_markup: new InlineKeyboard().url(
// 					"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
// 					"https://t.me/trust_unity",
// 				),
// 			})

// 			// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
// 			ctx.session.groupData = {}
// 			ctx.session.step = undefined
// 		} catch (err) {
// 			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", err)
// 			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
// 		}
// 	}
// })

bot.on("message:text", async ctx => {
	if (ctx.message.text.startsWith("/")) return

	const step = ctx.session.step

	if (step === "name") {
		ctx.session.groupData.name = ctx.message.text.trim()
		ctx.session.step = "format"
		await ctx.reply("‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:\n\n‚ùå‚Äº _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_")
	} else if (step === "format") {
		const format = ctx.message.text.trim()
		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
		if (format !== "-") {
			ctx.session.groupData.format = format
		}
		ctx.session.step = "community"
		await ctx.reply("üë• –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø—ã:")
	} else if (step === "community") {
		const community = ctx.message.text.trim()
		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
		if (community !== "-") {
			ctx.session.groupData.community = community
		}
		ctx.session.step = "description"
		await ctx.reply(
			"‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n‚ùå‚Äº _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		)
	} else if (step === "description") {
		const description = ctx.message.text.trim()
		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
		if (description !== "-") {
			ctx.session.groupData.description = description
		}
		ctx.session.step = "link"
		await ctx.reply(
			"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\nüëâ –ï—Å–ª–∏ *Telegram*, —Ç–æ –ø–∏—à–∏—Ç–µ *@–ù–∞–∑–≤–∞–Ω–∏–µ*\nüëâ –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏, —Ç–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å *https://*\n\n‚ùå‚Äº _(–ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—à–∏—Ç–µ -)_",
		)
	} else if (step === "contact") {
		const contact = ctx.message.text.trim()
		ctx.session.groupData.contact = contact
		ctx.session.step = "link"
		await ctx.reply("üõú *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* (–ü–ì/–ü–ì–û/ –ö—É—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.)")
	} else if (step === "link") {
		const link = ctx.message.text.trim()
		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
		if (link !== "-") {
			ctx.session.groupData.link = link
		}

		const groupData = ctx.session.groupData

		try {
			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
			const { data, error } = await supabase.from("groups").insert([
				{
					name: groupData.name,
					format: groupData.format,
					community: groupData.community,
					description: groupData.description,
					contact: groupData.contact,
					link: groupData.link,
					created_at: new Date().toISOString(),
				},
			])

			if (error) {
				console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ë–î:", error)
				await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ "-".
			let message = `üçÄ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${groupData.name}\n`

			if (groupData.format && groupData.format !== "-") {
				message += `‚ô® *–§–æ—Ä–º–∞—Ç:* ${groupData.format}\n`
			}
			if (groupData.community) {
				message += `üë• *–°–æ–æ–±—â–µ—Å—Ç–≤–æ:* ${groupData.community}\n`
			}
			if (groupData.description && groupData.description !== "-") {
				message += `‚ú® *–û–ø–∏—Å–∞–Ω–∏–µ:* ${groupData.description}\n`
			}
			if (groupData.contact) {
				message += `üõú *–ö–æ–Ω—Ç–∞–∫—Ç:* ${groupData.contact}`
			}
			if (groupData.link && groupData.link !== "-") {
				message += `üåê *–°—Å—ã–ª–∫–∞:* ${groupData.link}`
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
			await bot.api.sendMessage(CHANNEL_ID, message, { parse_mode: "Markdown" })

			// –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
			await ctx.reply("*–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞* üéâ\n–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start", {
				parse_mode: "Markdown",
				reply_markup: new InlineKeyboard().url(
					"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
					"https://t.me/trust_unity",
				),
			})

			// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
			ctx.session.groupData = {}
			ctx.session.step = undefined
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", err)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}
})

export default webhookCallback(bot, "http")
