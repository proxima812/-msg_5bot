require("dotenv").config()
import { createClient } from "@supabase/supabase-js"
import {
	Bot,
	Context,
	InlineKeyboard,
	session,
	SessionFlavor,
	webhookCallback,
} from "grammy"

const supabase = createClient(
	"https://fkwivycaacgpuwfvozlp.supabase.co",
	process.env.SP_API_SECRET,
)

const token = process.env.TOKEN
if (!token) throw new Error("TOKEN is unset")

interface SessionData {
	groupData: {
		name?: string
		format?: string
		community?: string
		description?: string
		link?: string
	}
	step?: string
}

type MyContext = Context & SessionFlavor<SessionData>

const bot = new Bot<MyContext>(token)
const CHANNEL_ID = "-1002387924511"

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session({ initial: (): SessionData => ({ groupData: {} }) }))

bot.command("start", async ctx => {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ
	ctx.session.step = undefined

	// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
	// ctx.session = { groupData: {}, step: undefined }

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: new InlineKeyboard()
			.text("üî• –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É üî•", "add_group")
			.row()
			.url("üë• –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://t.me/trust_unity")
			.row()
			.url("üåê –°–∞–π—Ç, –≥–¥–µ –±—É–¥–µ—Ç –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞", "https://example.com"),
		// .text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã", "view_groups"),
	})
})

// –ö–æ–º–∞–Ω–¥–∞ /add_group —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
bot.command("add_group", async ctx => {
	if (!ctx.session.groupData) {
		ctx.session.groupData = {}
	}
	// ctx.session.groupData = {}
	await ctx.reply("üçÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
	ctx.session.step = "name"
})

bot.command("show_groups", async ctx => {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if (ctx.from.id !== 5522146122) {
		await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	const { data, error } = await supabase.from("groups").select("*")

	if (error || !data || data.length === 0) {
		await ctx.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –≤ –∫–∞–Ω–∞–ª
	for (const group of data) {
		await bot.api.sendMessage(
			CHANNEL_ID,
			`üçÄ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${group.name}\n‚ô® **–§–æ—Ä–º–∞—Ç:** ${group.format}\nüë• **–°–æ–æ–±—â–µ—Å—Ç–≤–æ:** ${group.community}\n‚ú® **–û–ø–∏—Å–∞–Ω–∏–µ:** ${group.description}\nüåê **–°—Å—ã–ª–∫–∞:** ${group.link}`,
			{ parse_mode: "Markdown" },
		)
	}

	await ctx.reply("–í—Å–µ –≥—Ä—É–ø–ø—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª..")
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
bot.on("message:text", async ctx => {
	if (ctx.message.text.startsWith("/")) return

	const step = ctx.session.step

	if (step === "name") {
		ctx.session.groupData.name = ctx.message.text.trim()
		ctx.session.step = "format"
		await ctx.reply("‚ô® –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã:")
	} else if (step === "format") {
		ctx.session.groupData.format = ctx.message.text.trim()
		ctx.session.step = "community"
		await ctx.reply("üë• –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø—ã:")
	} else if (step === "community") {
		ctx.session.groupData.community = ctx.message.text.trim()
		ctx.session.step = "description"
		await ctx.reply("‚ú® –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n(–ë–µ–∑ Premium –≠–º–æ–¥–∂–∏!)")
	} else if (step === "description") {
		ctx.session.groupData.description = ctx.message.text.trim()
		ctx.session.step = "link"
		await ctx.reply(
			"–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:\nüëâ –ï—Å–ª–∏ Telegram, —Ç–æ –ø–∏—à–∏—Ç–µ @–ù–∞–∑–≤–∞–Ω–∏–µ\nüëâ –ï—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏, —Ç–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å https://",
			{ parse_mode: "Markdown" },
		)
	} else if (step === "link") {
		ctx.session.groupData.link = ctx.message.text.trim()

		const groupData = ctx.session.groupData

		try {
			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
			const { data, error } = await supabase.from("groups").insert([
				{
					name: groupData.name,
					format: groupData.format,
					community: groupData.community,
					description: groupData.description,
					link: groupData.link,
					created_at: new Date().toISOString(),
				},
			])

			if (error) {
				console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ –ë–î:", error)
				await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
				return
			}

			// –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
			await ctx.reply("**–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞** üéâ", {
				parse_mode: "Markdown",
				reply_markup: new InlineKeyboard().url(
					"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
					"https://t.me/trust_unity",
				),
			})

			// –ü—É–±–ª–∏–∫—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –≤ –∫–∞–Ω–∞–ª
			await bot.api.sendMessage(
				CHANNEL_ID,
				`üçÄ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${groupData.name}\n‚ô® **–§–æ—Ä–º–∞—Ç:** ${groupData.format}\nüë• **–°–æ–æ–±—â–µ—Å—Ç–≤–æ:** ${groupData.community}\n‚ú® **–û–ø–∏—Å–∞–Ω–∏–µ:** ${groupData.description}\nüåê **–°—Å—ã–ª–∫–∞:** ${groupData.link}`,
				{ parse_mode: "Markdown" },
			)

			// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
			ctx.session.groupData = {}
			ctx.session.step = undefined
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", err)
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}
})


// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx: MyContext) {
	const keyboard = new InlineKeyboard()
		.text("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", "add_group")
		.row()
		.text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã", "view_groups")

	await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		reply_markup: keyboard,
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
// bot.on("callback_query", async ctx => {
// 	const data = ctx.callbackQuery.data

// 	if (data === "add_group") {
// 		await ctx.answerCallbackQuery()
// 		await ctx.reply("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_group")

// 		const keyboard = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")
// 		await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
// 			reply_markup: keyboard,
// 		})
// 	} else if (data === "view_groups") {
// 		const userId = ctx.from.id

// 		// –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
// 		const { data, error } = await supabase
// 			.from("groups")
// 			.select("*")
// 			.eq("user_id", userId)

// 		if (error || !data || data.length === 0) {
// 			await ctx.answerCallbackQuery()
// 			await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")

// 			const keyboard = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")
// 			await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
// 				reply_markup: keyboard,
// 			})
// 			return
// 		}

// 		const keyboard = new InlineKeyboard()
// 		data.forEach(group => {
// 			const shortDesc =
// 				group.name.length > 30 ? `${group.name.slice(0, 30)}...` : group.name
// 			keyboard.text(`#${group.id}: ${shortDesc}`, `view_group_${group.id}`).row()
// 		})
// 		keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "main_menu")

// 		await ctx.answerCallbackQuery()
// 		await ctx.reply("–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:", {
// 			reply_markup: keyboard,
// 		})
// 	} else if (data === "main_menu") {
// 		await ctx.answerCallbackQuery()
// 		await showMainMenu(ctx)
// 	} else if (data.startsWith("view_group_")) {
// 		const groupId = data.replace("view_group_", "")

// 		const { data, error } = await supabase
// 			.from("groups")
// 			.select("*")
// 			.eq("id", groupId)
// 			.single()

// 		if (error || !data) {
// 			await ctx.answerCallbackQuery("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
// 			return
// 		}

// 		await ctx.answerCallbackQuery()
// 		await ctx.reply(
// 			`#${data.id}:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${data.name}\n–§–æ—Ä–º–∞—Ç: ${data.format}\n–°–æ–æ–±—â–µ—Å—Ç–≤–æ: ${data.community}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${data.description}\n–°—Å—ã–ª–∫–∞: ${data.link}`,
// 		)
// 	} else {
// 		await ctx.answerCallbackQuery({ text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞." })
// 	}
// })

export default webhookCallback(bot, "http")
